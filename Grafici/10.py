import matplotlib.pyplot as plt
import numpy as np

l = [('eil51', 1), ('berlin52', 1), ('st70', 2), ('pr76', 1), ('eil76', 1), ('rat99', 1), ('kroD100', 3), ('kroA100', 1), ('kroC100', 1), ('kroB100', 1), ('kroE100', 1), ('rd100', 1), ('eil101', 1), ('lin105', 1), ('pr107', 3), ('pr124', 3), ('bier127', 2), ('ch130', 3), ('pr136', 1), ('pr144', 3), ('kroA150', 3), ('ch150', 1), ('kroB150', 3), ('pr152', 1), ('u159', 3), ('rat195', 1), ('d198', 3), ('kroA200', 1), ('kroB200', 3), ('ts225', 2), ('tsp225', 3), ('pr226', 1), ('gil262', 1), ('pr264', 3), ('a280', 1), ('pr299', 2), ('lin318', 3), ('linhp318', 3), ('rd400', 3), ('fl417', 1), ('pr439', 2), ('pcb442', 3), ('d493', 1), ('u574', 3), ('rat575', 3), ('p654', 3), ('d657', 3), ('u724', 3), ('rat783', 3), ('pr1002', 2)]
dF = {'eil51': 3, 'berlin52': 3, 'st70': 3, 'pr76': 3, 'eil76': 5, 'rat99': 3, 'kroD100': 3, 'kroA100': 3, 'kroC100': 3, 'kroB100': 3, 'kroE100': 3, 'rd100': 3, 'eil101': 5, 'lin105': 3, 'pr107': 3, 'pr124': 3, 'bier127': 6, 'ch130': 3, 'pr136': 3, 'pr144': 3, 'kroA150': 5, 'ch150': 4, 'kroB150': 3, 'pr152': 3, 'u159': 3, 'rat195': 5, 'd198': 6, 'kroA200': 5, 'kroB200': 3, 'ts225': 6, 'tsp225': 4, 'pr226': 3, 'gil262': 6, 'pr264': 6, 'a280': 6, 'pr299': 3, 'lin318': 5, 'linhp318': 5, 'rd400': 6, 'fl417': 3, 'pr439': 6, 'pcb442': 6, 'd493': 6, 'u574': 6, 'rat575': 5, 'p654': 3, 'd657': 6, 'u724': 6, 'rat783': 6, 'pr1002': 6}

# Sample data (4 lists)
x = [x[0] for x in l[:30]]

y1 = [np.float64(0.004351831785642691), np.float64(0.0034001030299433094), np.float64(0.0018216155358521005), np.float64(0.002989112891411332), np.float64(0.0039452691650541764), np.float64(0.0024601595240697997), np.float64(0.0031110902039834464), np.float64(0.0018170801954194068), np.float64(0.00625634533776164), np.float64(0.0031443598535595284), np.float64(0.003207275291658419), np.float64(0.0017886404233834487), np.float64(0.0035436251679517227), np.float64(0.004427156211929861), np.float64(0.0028687796509106645), np.float64(0.0015076104356410006), np.float64(0.0014074402569985872), np.float64(0.0030660571395532297), np.float64(0.0014777047592679931), np.float64(0.006462814728393728), np.float64(0.001206298600751725), np.float64(0.0013109261877606315), np.float64(0.00401315918780855), np.float64(0.0015517973636173402), np.float64(0.002510869342814716), np.float64(0.0015332115078521497), np.float64(0.0014058615623532974), np.float64(0.0021393611800987968), np.float64(0.0006293656214831586), np.float64(0.0010978854081392542)]
y2 = [np.float64(0.0006800168700008184), np.float64(0.0007588782435669089), np.float64(0.0009615302880092341), np.float64(0.0016684734740213794), np.float64(0.00022624069490080666), np.float64(0.00037831803139671367), np.float64(0.0006935772189200243), np.float64(0.0010832113389207603), np.float64(0.0007865309020108147), np.float64(0.0008301717655467728), np.float64(0.0014185582559007096), np.float64(0.000583029823211136), np.float64(0.0003525520088512288), np.float64(0.0020966450522690258), np.float64(0.0008959533677652468), np.float64(0.0015698479129075634), np.float64(0.00019247902460078895), np.float64(0.0007630099172463116), np.float64(0.0002695291386526032), np.float64(0.004448389690885602), np.float64(0.0006036720504637501), np.float64(0.0004433396899452603), np.float64(0.0008477598600846641), np.float64(0.0005838814813947297), np.float64(0.0005949550129150671), np.float64(0.000646718716684242), np.float64(0.00040790497654043516), np.float64(0.0004489793802243123), np.float64(0.0004090757680272752), np.float64(0.0015365618865561836)]
y3 = [np.float64(0.00166753653245619), np.float64(0.0012069937575670292), np.float64(0.0015431304993653804), np.float64(0.0013930328701310627), np.float64(0.0014455814433628723), np.float64(0.0017038891418153176), np.float64(0.001068581590915411), np.float64(0.0014039480300252303), np.float64(0.002120884866208856), np.float64(0.0022830874575910693), np.float64(0.0018234599542412144), np.float64(0.001872668293471506), np.float64(0.0008790992762540044), np.float64(0.0022328739673975768), np.float64(0.001931514451880819), np.float64(0.0008424509746142949), np.float64(0.0002539454348440102), np.float64(0.0005680157614671318), np.float64(0.0008591834068288573), np.float64(0.0019368983681141458), np.float64(0.0005381116353897394), np.float64(0.0007700993815070761), np.float64(0.0008551296955818482), np.float64(0.0013143581880526527), np.float64(0.0006751372927431052), np.float64(0.0009085629425193178), np.float64(0.00016216939104723348), np.float64(0.0011104035424317187), np.float64(0.00041215955227267973), np.float64(0.0019155279664960375)]
y4 = [np.float64(0.0017995781622346634), np.float64(0.0013368117247311783), np.float64(0.0015041107599763897), np.float64(0.002209313942419681), np.float64(0.0008428556702834105), np.float64(0.002236707507035609), np.float64(0.0015478019249320477), np.float64(0.0017816131477530217), np.float64(0.0018524915222576644), np.float64(0.001299161143648572), np.float64(0.0020643227709996274), np.float64(0.001788670261001857), np.float64(0.0007738135476140529), np.float64(0.001975814573187127), np.float64(0.0006753432271239652), np.float64(0.0024825637939221165), np.float64(0.000653826331446876), np.float64(0.0013508531929572554), np.float64(0.0007250416736596918), np.float64(0.003307438241027324), np.float64(0.0011018886284359947), np.float64(0.0011630882035899574), np.float64(0.0009214949794356283), np.float64(0.001072661834795844), np.float64(0.002106008966806412), np.float64(0.0019518439765481349), np.float64(0.0004932235591785325), np.float64(0.0015113052869389102), np.float64(0.0012433793819765558), np.float64(0.0026634528155280923)]
y5 = [np.float64(0.0002718622649812711), np.float64(0.0008503966259230409), np.float64(0.00043044824496341673), np.float64(0.0010809099552757868), np.float64(0.0002681009986313524), np.float64(0.0005164187046209932), np.float64(0.00048040414787656633), np.float64(0.0006695437877281258), np.float64(0.0006165545973323035), np.float64(0.00039579001645686097), np.float64(0.0006038323428089124), np.float64(0.0007373049063992235), np.float64(0.00026456300138626013), np.float64(0.0006575296031453631), np.float64(4.3097712885960933e-05), np.float64(0.000563213273410539), np.float64(0.0008360480375403206), np.float64(0.0005468192625043292), np.float64(0.0003742717039453327), np.float64(0.0012629613548788294), np.float64(0.000382310776717271), np.float64(0.000677482515133878), np.float64(0.0004021635290709386), np.float64(0.0005043207518981003), np.float64(0.0014586375610179325), np.float64(0.0003612656150138409), np.float64(0.0006900514072648698), np.float64(0.0004833027935050587), np.float64(0.00046577860859427504), np.float64(0.0006015849124883266)]

print(np.mean(y1))
print(np.mean(y2))
print(np.mean(y3))
print(np.mean(y4))
print(np.mean(y5))
exit()

# qualit√† Furthest

# Plotting each list with different color and marker
plt.figure(figsize=(14, 6))

plt.plot(x, y1, marker='o', color='blue', label='Nearest Neighbor')
plt.plot(x, y2, marker='s', color='red', label='Nearest Insertion')
plt.plot(x, y3, marker='d', color='purple', label='Cheapest Insertion versione 3')
plt.plot(x, y4, marker='^', color='green', label='Farthest Insertion')
plt.plot(x, y5, marker='*', color='orange', label='Furthest Insertion versione 2')

plt.xticks(rotation=45)
plt.xlabel('Prime 30 istanze TSP da TSP-LIB')
plt.ylabel('Varianza delle soluzioni trovate')
#plt.yscale('log')
plt.title('Varianza delle soluzioni trovate')
plt.legend()  # Show legend based on labels

plt.grid(True)
plt.tight_layout()
plt.savefig("/home/asaf/Desktop/Furthest-insertion/Grafici/10.png")
plt.show()

