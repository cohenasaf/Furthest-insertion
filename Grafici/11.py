import matplotlib.pyplot as plt
import numpy as np

l = [('eil51', 1), ('berlin52', 1), ('st70', 2), ('pr76', 1), ('eil76', 1), ('rat99', 1), ('kroD100', 3), ('kroA100', 1), ('kroC100', 1), ('kroB100', 1), ('kroE100', 1), ('rd100', 1), ('eil101', 1), ('lin105', 1), ('pr107', 3), ('pr124', 3), ('bier127', 2), ('ch130', 3), ('pr136', 1), ('pr144', 3), ('kroA150', 3), ('ch150', 1), ('kroB150', 3), ('pr152', 1), ('u159', 3), ('rat195', 1), ('d198', 3), ('kroA200', 1), ('kroB200', 3), ('ts225', 2), ('tsp225', 3), ('pr226', 1), ('gil262', 1), ('pr264', 3), ('a280', 1), ('pr299', 2), ('lin318', 3), ('linhp318', 3), ('rd400', 3), ('fl417', 1), ('pr439', 2), ('pcb442', 3), ('d493', 1), ('u574', 3), ('rat575', 3), ('p654', 3), ('d657', 3), ('u724', 3), ('rat783', 3), ('pr1002', 2)]
dF = {'eil51': 3, 'berlin52': 3, 'st70': 3, 'pr76': 3, 'eil76': 5, 'rat99': 3, 'kroD100': 3, 'kroA100': 3, 'kroC100': 3, 'kroB100': 3, 'kroE100': 3, 'rd100': 3, 'eil101': 5, 'lin105': 3, 'pr107': 3, 'pr124': 3, 'bier127': 6, 'ch130': 3, 'pr136': 3, 'pr144': 3, 'kroA150': 5, 'ch150': 4, 'kroB150': 3, 'pr152': 3, 'u159': 3, 'rat195': 5, 'd198': 6, 'kroA200': 5, 'kroB200': 3, 'ts225': 6, 'tsp225': 4, 'pr226': 3, 'gil262': 6, 'pr264': 6, 'a280': 6, 'pr299': 3, 'lin318': 5, 'linhp318': 5, 'rd400': 6, 'fl417': 3, 'pr439': 6, 'pcb442': 6, 'd493': 6, 'u574': 6, 'rat575': 5, 'p654': 3, 'd657': 6, 'u724': 6, 'rat783': 6, 'pr1002': 6}

# Sample data (4 lists)
x = [x[0] for x in l[:30]]

y1 = [np.float64(9.383440017700195e-05), np.float64(0.00010022640228271484), np.float64(0.0001788330078125), np.float64(0.00021021604537963868), np.float64(0.00021403074264526368), np.float64(0.0003566694259643555), np.float64(0.00034421205520629883), np.float64(0.00035147666931152345), np.float64(0.0003403472900390625), np.float64(0.00033244848251342776), np.float64(0.00031394243240356445), np.float64(0.000312495231628418), np.float64(0.0003099393844604492), np.float64(0.0003753018379211426), np.float64(0.0003950333595275879), np.float64(0.0004596686363220215), np.float64(0.00045160293579101564), np.float64(0.0004964375495910645), np.float64(0.000580761432647705), np.float64(0.0006307649612426758), np.float64(0.0007413959503173828), np.float64(0.0007995891571044921), np.float64(0.0006921005249023438), np.float64(0.0007161450386047363), np.float64(0.0008079791069030761), np.float64(0.0013048553466796875), np.float64(0.00137636661529541), np.float64(0.0011658287048339844), np.float64(0.0011645936965942382), np.float64(0.0014627504348754883)]
y2 = [np.float64(0.0011334466934204103), np.float64(0.0011967992782592773), np.float64(0.0021146583557128907), np.float64(0.0024882817268371583), np.float64(0.0025551152229309083), np.float64(0.004151289463043213), np.float64(0.004212138652801514), np.float64(0.0042384123802185055), np.float64(0.004238724708557129), np.float64(0.004187428951263427), np.float64(0.004137492179870606), np.float64(0.004112951755523682), np.float64(0.004213840961456299), np.float64(0.004606204032897949), np.float64(0.0048529434204101565), np.float64(0.006237750053405762), np.float64(0.006410698890686035), np.float64(0.00670548677444458), np.float64(0.007457978725433349), np.float64(0.00832728385925293), np.float64(0.009185738563537597), np.float64(0.009422230720520019), np.float64(0.00926358938217163), np.float64(0.009399471282958984), np.float64(0.010376429557800293), np.float64(0.015669877529144286), np.float64(0.016623485088348388), np.float64(0.016003634929656983), np.float64(0.015967748165130614), np.float64(0.02008582353591919)]
y3 = [np.float64(0.0034059691429138184), np.float64(0.003668577671051025), np.float64(0.007337369918823242), np.float64(0.00822183609008789), np.float64(0.008529462814331056), np.float64(0.0142669677734375), np.float64(0.01616367816925049), np.float64(0.014326903820037842), np.float64(0.014331252574920654), np.float64(0.014169788360595703), np.float64(0.01407280683517456), np.float64(0.013853323459625245), np.float64(0.014267199039459229), np.float64(0.015418784618377685), np.float64(0.018554000854492186), np.float64(0.023730466365814207), np.float64(0.023350038528442384), np.float64(0.025985143184661864), np.float64(0.025610239505767823), np.float64(0.032069809436798095), np.float64(0.03665680408477783), np.float64(0.03361054182052612), np.float64(0.03661766052246094), np.float64(0.03241511344909668), np.float64(0.041290833950042724), np.float64(0.057552428245544435), np.float64(0.06776215553283692), np.float64(0.05732292175292969), np.float64(0.0646983814239502), np.float64(0.07747973918914795)]
y4 = [np.float64(0.0011824893951416016), np.float64(0.001240830421447754), np.float64(0.002236618995666504), np.float64(0.002612135410308838), np.float64(0.002677948474884033), np.float64(0.004414019584655762), np.float64(0.0044376301765441896), np.float64(0.004461047649383545), np.float64(0.004422638416290283), np.float64(0.0043859100341796875), np.float64(0.004383537769317627), np.float64(0.004332778453826905), np.float64(0.004439191818237305), np.float64(0.004853885173797607), np.float64(0.0051333379745483396), np.float64(0.006554689407348633), np.float64(0.006805660724639892), np.float64(0.0071108341217041016), np.float64(0.007916057109832763), np.float64(0.008735942840576171), np.float64(0.00990262746810913), np.float64(0.010087809562683105), np.float64(0.009829514026641846), np.float64(0.00989034652709961), np.float64(0.011048221588134765), np.float64(0.01709590673446655), np.float64(0.017876136302947997), np.float64(0.01708974838256836), np.float64(0.0170278000831604), np.float64(0.021382935047149658)]
y5 = [np.float64(0.0037775063514709473), np.float64(0.004285893440246582), np.float64(0.007245709896087646), np.float64(0.008864293098449707), np.float64(0.009055233001708985), np.float64(0.015270416736602782), np.float64(0.01482212781906128), np.float64(0.015268292427062988), np.float64(0.014874677658081054), np.float64(0.015014307498931885), np.float64(0.014653053283691406), np.float64(0.014847609996795654), np.float64(0.015654921531677246), np.float64(0.01734933614730835), np.float64(0.02013995885848999), np.float64(0.033030824661254884), np.float64(0.02487187147140503), np.float64(0.02391861915588379), np.float64(0.027449274063110353), np.float64(0.03531562328338623), np.float64(0.03309426069259644), np.float64(0.03405813217163086), np.float64(0.03371465682983398), np.float64(0.03878493070602417), np.float64(0.039686331748962404), np.float64(0.057813315391540526), np.float64(0.06287989377975464), np.float64(0.05801789283752441), np.float64(0.05885047674179077), np.float64(0.07579944610595703)]

#print(np.mean(y1))
#print(np.mean(y2))
#print(np.mean(y3))
#print(np.mean(y4))
#print(np.mean(y5))
#exit()

# qualit√† Furthest

# Plotting each list with different color and marker
plt.figure(figsize=(14, 6))

plt.plot(x, y1, marker='o', color='blue', label='Nearest Neighbor')
plt.plot(x, y2, marker='s', color='red', label='Nearest Insertion')
plt.plot(x, y3, marker='d', color='purple', label='Cheapest Insertion versione 3')
plt.plot(x, y4, marker='^', color='green', label='Farthest Insertion')
plt.plot(x, y5, marker='*', color='orange', label='Furthest Insertion versione 2')

plt.xticks(rotation=45)
plt.xlabel('Prime 30 istanze TSP da TSP-LIB')
plt.ylabel('Tempi medi (secondi)')
plt.yscale('log')
plt.title('Tempi medi per le prime 30 istanze dal TSP-LIB')
plt.legend()  # Show legend based on labels

plt.grid(True)
plt.tight_layout()
plt.savefig("/home/asaf/Desktop/Furthest-insertion/Grafici/11.png")
plt.show()

